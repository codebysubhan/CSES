Fast I/O? Add these 2 lines in main():
------- ios::sync_with_stdio(false);
------- cin.tie(NULL);
all header files and necessary algos for competitive programming?
------- #include <bits/stdc++.h>
it might not be available as it is not the part of STL
want to use sorting and other algorithms?
------- #include<algorithm>

Overflow? ---- it's better to use python when we have problems that require heavy arithmetics, like in tasks_and_deadline.
#include <iostream>
#include <climits>    // For int, long, long long
#include <cstdint>    // For int64_t, uint64_t
int main() {
    std::cout << "INT_MAX: " << INT_MAX << "\n";
    std::cout << "LONG_MAX: " << LONG_MAX << "\n";
    std::cout << "LLONG_MAX: " << LLONG_MAX << "\n";
    std::cout << "UINT_MAX: " << UINT_MAX << "\n";
    return 0;
}


Q > how to create / initialize 2D array with 0?
vector<vector<int>> dp(n, vector<int>(m));

Q > why pass " & " in functions?
so that we can access the actual memory for data manipulation.

containers, iterators, algorithms, functors
array vs vectors
1. Containers - Vectors(dynamic arrays, header file= #inlcude<vector>)
vectors<data_type> vec;
vec.size();
vec.capacity();
vec.push_back();
vec.pop_back();
vec.emplace_back();
vec.at();
vec[];
vec.front();
vec.back();
vec.erase();		O(n), .erase(start, end), [start, end)
vec.insert();	O(n), .insert(pos, value)
vec.clear();
vec.empty();
vec.begin();		gives pointer of index 0
vec.empty();		is the vector empty?

2. Iterators
vec.begin();		*(vec.begin()); --> gives value at index 0; dereferencing
vec.end();		*(vec.begin()); --> gives value at index n; not n-1
vec.rbegin();	
vec.rend();
vector<int>::iterator itr; --> gives iterator itr for vector with dtype iterator
vector<int>::reverse_iterator itr; --> gives iterator itr for vector with dtype iterator
modern c++ can automatically identify the iterator if we write it like the 2nd method.

method 1:
vector<int>::iterator itr;
for (itr = vec.begin(); iter!=vec.end(); itr++){
	// body
}

vector<int>::reverse_iterator rtr;
for (rtr = vec.rbegin(); rtr!=vec.rend(); rtr++){
	// body
}

method 2: -- modern c++
for (auto itr = vec.begin(); iter!=vec.end(); itr++){
	// body
}

for (auto rtr = vec.rbegin(); rtr!=vec.rend(); rtr++){
	// body
}

useful methods:
1. Initialize with default values?
vector<int> vec(9, 10);		// gives a vector with 9 size and 10 on each index
2. Initialize with another vector values?
vector<int> vec1(vec);
3. namespace?
using namespace std;
4. I/O functions header file?
#include<iostream>

1- Containers - list(doubly linked list, header file= #inlcude<list>)
list<data_type> l;
l.push_back();
l.push_front();
l.pop_back();
l.pop_front();
l.emplace_back();
l.emplace_front();
additional functions:	size, erase, clear, begin, rbegin, end, rend, insert, front, back

1- Containers - deque(double ended queue build on dynamic arrays, header file= #inlcude<deque>)
deque<data_type> d;
d[2] --> possible;
l[2] --> not possible;
d.push_back();
d.push_front();
d.pop_back();
d.pop_front();
d.emplace_back();
d.emplace_front();
additional functions:	size, erase, clear, begin, rbegin, end, rend, insert, front, back

1- Containers - pair(no header file needed)
pair<dtype1, dtype2> p;
p.first; gives first value
p.second; gives second value

useful methods:
1. pair<int, pair<int, int>> nested_pair;
2. vector<pair<int, int>> vec;
3.
for (pair<int, int> p : vec){
	cout << p.first << endl;
	cout << p.second << endl;
}
4.
for (auto p : vec){
	cout << p.first << endl;
	cout << p.second << endl;
}
5. vec.push_back({1, 2});
6. vec.emplace_back(1, 2); --> automatically convert the 2 values into pair

1- Containers - stack(LIFO, header file= #include<stack>)
stack<int> s;
s.push();
s.emplace();
s.top();
s.pop();
s.size();
s.empty();
s.swap();	// swap the values of 2 stacks


useful methods:
while(!s.empty()){
	cout << s.top() << endl;
	s.pop();
}


1- Containers - queue(FIFO, header file= #include<queue>)
queue<int> q;
q.push();
q.emplace();
q.front();		// not .top();
q.pop();
q.size();
q.empty();
q.swap();	swap the values of 2 queues

1- Containers - priority queue(maxheap / minheap / binary heap, header file= same as queue)
priority_queue<int> q; --> maxheap / default
priority_queue<int, vector<int>, greater<int>> q; --> minheap
--> greater<int> --> functor / comparator (tells how to place the elements / which comparisons?)
q.push();		O(logn)
q.emplace();
q.top();		O(1)
q.pop();		O(logn)
q.size();
q.empty();


1- Containers - map((key, value), header file= #include<map>)
map<dtype1, dtype2> m;
m[key] = value;
m.insert();
m.emplace();	// doesn't have to be a pair
m.count();		// give the count of instances asscociated with given key
m.erase();
m.find();		// if found gives iterator of that "" otherwise gives m.end()
m.size();
m.empty();
useful methods:
for (auto p : m){
	cout << p.first << " " << p.second << endl;
}
- the values will be printed in ascending order of keys (in case of alphabets / strings, it is lexographically sorted in ascending order)
-
if (m.find() != m.end()){
	cout << "found!" << endl;
}


1- Containers - multimap(can store multiple same keys, header file= same as map)
multimap<dtype1, dtype2> m;
- can't use m["key"]
m.erase(m.find("key")) --> removes the first pair with key matching


1- Containers - unordered map(random order of pairs, header file= #inlcude<unordered_map>)
unordered_map<dtype1, dtype2> m;

- useful information:
- map is based upon self balancing tree so functions have fixed time complexity of O(logn)
- unordered_map is based upon random order so "on average" we have O(1) but in worst case we have O(n)

1- Containers - set(unique values stored in particular sorted order, header file= #include<set>)
set<int> s;
s.insert();
s.emplace();	// doesn't have to be a pair
s.count();		// give the count of instances asscociated with given key
s.erase();
s.find();		// if found gives iterator of that "" otherwise gives m.end()
s.size();
s.empty();
s.lower_bound(); // s.lower_bound(4); --> either give 4, if not found then give closest minimum to 4
// gives iterator, we can use dereferncing for printing the value --> *(iterator) if not found then returns s.end();
s.upper_bound(); // value should be strictly greater than key
- useful information:
- set is based upon self balancing tree so functions have fixed time complexity of O(logn)

1- Containers - multiset(header file= same as set)
multiset<int> s;


1- Containers - Unordered Set(header file= #include<unordered_set>, lower and upper bound doesn't work here because these methods only work on sorted data)
unordered_set<int> s;

---------------------------------------------------

1- Algorithms
- sorting:
sort(arr, arr+n); //arr is itself a pointer
sort(vec.begin(), vec.end());

- sorting in descending order
sort(arr, arr+n, greater<int>()); // comparator / functor gives the logic of comparison for sorting

- useful method:
- what if we have vector of pairs?
vector<pair<int, int>> vec = {{3,1}, {2,1}, {7,1}, {5,2}};
sort(vec.begin(), vec.end());
for (auto p : vec){
	cout << p.first << " " << p.second << endl;
}
// sorted based upon pair.first

- what if we want to sort based upon second value?
- we need to define a custom comparator
bool custom_comparator (pair<int, int> p1, pair<int, int> p2){
	if(p1.second < p2.second)	return true;
	if(p1.second > p2.second)	return false;
	if(p1.first < p2.first)	return true;
	else 	return false;

}
sort(vec.begin(), vec.end(), custom_comparator);

- reverse sorting:
reverse(v.begin(), v.end())


- next permutation:
next_permutation(v.begin(), v.end())

- previous permutation
prev_permutation(v.begin(), v.end())

- other methods:
swap, min, max
int a = 5, b = 6;
swap(a, b);

- Max & Min elements
max_elements(v.begin(), v.end()); // derefernce the iterator to get the value
min_elements(v.begin(), v.end());

- binary search
binary_search(v.begin(), v.end(), target);

- count set bits
__builtin_popcount();		// returns set bits of int
__builtin_popcountl();		// returns set bits of long int
__builtin_popcountll();		// returns set bits of long long int


TIPS:
Common Type Castings:

Avoiding Integer Overflow:
int a = 100000, b = 100000;
long long res = 1LL * a * b;

Character to Integer:
char d = '9';
int val = d - '0';  // 9

Integer to Character:
int val = 7;
char d = val + '0';  // '7'

Size conversions:
vector<int> v;
int n = (int)v.size(); // from size_t to int

int to string:
int x = 42;
string s = to_string(x);

TIPS:
Sets:
for (int j : s){
	s.insert(i + j);
}
This causes undefined behavior, because you're changing the set while walking through it â€” it can lead to:
- Infinite loops
- Missed combinations
- Wrong or partial results

